// Code generated by MockGen. DO NOT EDIT.
// Source: ./sched.go
//
// Generated by this command:
//
//	mockgen -source ./sched.go -destination ./internal/mock/mock_gen.go -package mock TimeProvider,Timer
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	sched "github.com/romshark/sched/v2"
	ksuid "github.com/segmentio/ksuid"
	gomock "go.uber.org/mock/gomock"
)

// MockTimer is a mock of Timer interface.
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
	isgomock struct{}
}

// MockTimerMockRecorder is the mock recorder for MockTimer.
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance.
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// Reset mocks base method.
func (m *MockTimer) Reset(arg0 sched.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockTimerMockRecorder) Reset(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTimer)(nil).Reset), arg0)
}

// Stop mocks base method.
func (m *MockTimer) Stop() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockTimerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimer)(nil).Stop))
}

// MockTimeProvider is a mock of TimeProvider interface.
type MockTimeProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTimeProviderMockRecorder
	isgomock struct{}
}

// MockTimeProviderMockRecorder is the mock recorder for MockTimeProvider.
type MockTimeProviderMockRecorder struct {
	mock *MockTimeProvider
}

// NewMockTimeProvider creates a new mock instance.
func NewMockTimeProvider(ctrl *gomock.Controller) *MockTimeProvider {
	mock := &MockTimeProvider{ctrl: ctrl}
	mock.recorder = &MockTimeProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeProvider) EXPECT() *MockTimeProviderMockRecorder {
	return m.recorder
}

// AfterFunc mocks base method.
func (m *MockTimeProvider) AfterFunc(arg0 sched.Duration, arg1 func()) sched.Timer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AfterFunc", arg0, arg1)
	ret0, _ := ret[0].(sched.Timer)
	return ret0
}

// AfterFunc indicates an expected call of AfterFunc.
func (mr *MockTimeProviderMockRecorder) AfterFunc(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFunc", reflect.TypeOf((*MockTimeProvider)(nil).AfterFunc), arg0, arg1)
}

// Now mocks base method.
func (m *MockTimeProvider) Now() sched.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(sched.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeProviderMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeProvider)(nil).Now))
}

// MockQueueReader is a mock of QueueReader interface.
type MockQueueReader struct {
	ctrl     *gomock.Controller
	recorder *MockQueueReaderMockRecorder
	isgomock struct{}
}

// MockQueueReaderMockRecorder is the mock recorder for MockQueueReader.
type MockQueueReaderMockRecorder struct {
	mock *MockQueueReader
}

// NewMockQueueReader creates a new mock instance.
func NewMockQueueReader(ctrl *gomock.Controller) *MockQueueReader {
	mock := &MockQueueReader{ctrl: ctrl}
	mock.recorder = &MockQueueReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueReader) EXPECT() *MockQueueReaderMockRecorder {
	return m.recorder
}

// Has mocks base method.
func (m *MockQueueReader) Has(arg0 ksuid.KSUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockQueueReaderMockRecorder) Has(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockQueueReader)(nil).Has), arg0)
}

// Len mocks base method.
func (m *MockQueueReader) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockQueueReaderMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockQueueReader)(nil).Len))
}

// Scan mocks base method.
func (m *MockQueueReader) Scan(after ksuid.KSUID, fn func(ksuid.KSUID, func()) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", after, fn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockQueueReaderMockRecorder) Scan(after, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockQueueReader)(nil).Scan), after, fn)
}

// MockQueueWriter is a mock of QueueWriter interface.
type MockQueueWriter struct {
	ctrl     *gomock.Controller
	recorder *MockQueueWriterMockRecorder
	isgomock struct{}
}

// MockQueueWriterMockRecorder is the mock recorder for MockQueueWriter.
type MockQueueWriterMockRecorder struct {
	mock *MockQueueWriter
}

// NewMockQueueWriter creates a new mock instance.
func NewMockQueueWriter(ctrl *gomock.Controller) *MockQueueWriter {
	mock := &MockQueueWriter{ctrl: ctrl}
	mock.recorder = &MockQueueWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueWriter) EXPECT() *MockQueueWriterMockRecorder {
	return m.recorder
}

// Front mocks base method.
func (m *MockQueueWriter) Front() (ksuid.KSUID, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Front")
	ret0, _ := ret[0].(ksuid.KSUID)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// Front indicates an expected call of Front.
func (mr *MockQueueWriterMockRecorder) Front() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Front", reflect.TypeOf((*MockQueueWriter)(nil).Front))
}

// Remove mocks base method.
func (m *MockQueueWriter) Remove(arg0 ksuid.KSUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockQueueWriterMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockQueueWriter)(nil).Remove), arg0)
}

// Set mocks base method.
func (m *MockQueueWriter) Set(arg0 ksuid.KSUID, arg1 func()) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockQueueWriterMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQueueWriter)(nil).Set), arg0, arg1)
}

// MockQueueReadWriter is a mock of QueueReadWriter interface.
type MockQueueReadWriter struct {
	ctrl     *gomock.Controller
	recorder *MockQueueReadWriterMockRecorder
	isgomock struct{}
}

// MockQueueReadWriterMockRecorder is the mock recorder for MockQueueReadWriter.
type MockQueueReadWriterMockRecorder struct {
	mock *MockQueueReadWriter
}

// NewMockQueueReadWriter creates a new mock instance.
func NewMockQueueReadWriter(ctrl *gomock.Controller) *MockQueueReadWriter {
	mock := &MockQueueReadWriter{ctrl: ctrl}
	mock.recorder = &MockQueueReadWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueReadWriter) EXPECT() *MockQueueReadWriterMockRecorder {
	return m.recorder
}

// Front mocks base method.
func (m *MockQueueReadWriter) Front() (ksuid.KSUID, func()) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Front")
	ret0, _ := ret[0].(ksuid.KSUID)
	ret1, _ := ret[1].(func())
	return ret0, ret1
}

// Front indicates an expected call of Front.
func (mr *MockQueueReadWriterMockRecorder) Front() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Front", reflect.TypeOf((*MockQueueReadWriter)(nil).Front))
}

// Has mocks base method.
func (m *MockQueueReadWriter) Has(arg0 ksuid.KSUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Has", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Has indicates an expected call of Has.
func (mr *MockQueueReadWriterMockRecorder) Has(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Has", reflect.TypeOf((*MockQueueReadWriter)(nil).Has), arg0)
}

// Len mocks base method.
func (m *MockQueueReadWriter) Len() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len")
	ret0, _ := ret[0].(int)
	return ret0
}

// Len indicates an expected call of Len.
func (mr *MockQueueReadWriterMockRecorder) Len() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockQueueReadWriter)(nil).Len))
}

// Remove mocks base method.
func (m *MockQueueReadWriter) Remove(arg0 ksuid.KSUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockQueueReadWriterMockRecorder) Remove(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockQueueReadWriter)(nil).Remove), arg0)
}

// Scan mocks base method.
func (m *MockQueueReadWriter) Scan(after ksuid.KSUID, fn func(ksuid.KSUID, func()) bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", after, fn)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockQueueReadWriterMockRecorder) Scan(after, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockQueueReadWriter)(nil).Scan), after, fn)
}

// Set mocks base method.
func (m *MockQueueReadWriter) Set(arg0 ksuid.KSUID, arg1 func()) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockQueueReadWriterMockRecorder) Set(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockQueueReadWriter)(nil).Set), arg0, arg1)
}
